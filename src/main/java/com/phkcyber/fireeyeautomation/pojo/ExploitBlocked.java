package com.phkcyber.fireeyeautomation.pojo;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.List;

import com.google.gson.annotations.SerializedName;

import common.Common;

public class ExploitBlocked {
	public enum ALERT_METADATA {
		ALERT_URL,
		PRODUCT,
		ALERT_TYPE,
		DST_IP,
		ALERT_SEVERITY,
		SRC_IP,
		INDICATOR_NAME,
		TIMESTAMP
	}
	
	public String msg;
	public String appliance;
	public String version;
	public String product;
	@SerializedName("appliance-id")
	public String applianceId;
	public Alert alert;
	
	public class Alert {
		public String name;
		public String event_at;
		public String matched_at;
		public EventValues event_values;
		public Host host;
		public Condition condition;
		public String reported_at;
		public String resolution;
		public String source;
		public String event_type;
		public List <MatchedSourceAlerts> matched_source_alerts;
		public String event_id;
		public String uuid;
		
		//dates in JSON are inconsistent so need to parse
		public Date getEventAt() {
			return( Common.parseDates(this.event_at) );
		}
		
		public Date getMatchedAt() {
			return( Common.parseDates(this.matched_at) );
		}
		
		public Date getReporteAt() {
			return( Common.parseDates(this.reported_at) );
		}
		

		public class EventValues {
			public String[] messages;
			public String process_id;
			public List<AnalysisDetail> analysis_details;
			public String process_name;
			public String earliest_detection_time;
			public List<Document> documents;
			
			// The AnalysisDetail objects are all different and contain different fields
			// All fields will be defined since a secondary parsing of the objects would be
			// required based on a peek of the detail_type
			// All detail_type discovered so far
			//   action, analysis, analysis_result, apicall, EXPLOITED_PROCESS,
			//   file, folder, network, officevbamacrodetection, os, OS-CORRELATION
			//   process, regkey
			public class AnalysisDetail {
				public String detail_type;  
				public String detail_time;

				//analysis_detail objects
				public Action action;
				public Analysis analysis;
				public AnalysisResult analysis_result;
				public Generic apicall; 
				public Generic EXPLOITED_PROCESS; 
				public File file;
				public Folder folder;
				public Network network;
				public Generic officevbamacrodetection;
				public OS os;
				@SerializedName("OS-CORRELATION")
				public OSCorrelation OS_CORRELATION;
				public Process process;
				public RegKey regkey;
				
				//generic object which include the ProcessInfo
				public class Generic {
					public ProcessInfo processinfo;
					
					public class ProcessInfo {
						public String md5sum;
						public String pid;
						public String imagepath; //absolute path to executable
					}
				}
				
				//analysis_detail action
				public class Action extends Generic {
					public String mode; //terminate
					public String result; //success
				}
				
				//analysis_detail analysis
				public class Analysis {
					public String mode; //malware
					public String ftype; //doc
				}
				
				public class AnalysisResult {
					public String is_malicious; //no
					public String is_blocked; //yes
					public String _CONTENTS; //Suspicious file creation...
				}
				
				//analysis_detail file
				public class File extends Generic {
					public String filetype; //doc, N/A
					public String value; //file path
					@SerializedName("potential-exploit-document")
					public String potential_exploit_document; //true
					public String filesize;
					public String mode; //open
					public String timestamp; //unix time
					public String type; //opened_office_document
					public String md5sum;
					public String sha1sum;
				}
				
				//analysis_detail folder
				public class Folder extends Generic {
					public String value; //folder path
					public String mode; //close
					public String timestamp; //unix time	
				}
				
				//analysis_detail network
				public class Network extends Generic {
					public String protocol_type; //tcp
					public String ipaddress; //dest ip
					public String destination_port; //number of remote port?
					public String mode; //connect
					public String timestamp; //unix time
				}
				
				//analysis_detail os
				public class OS {
					public String name; //windows
					@SerializedName("os-language")
					public String os_language; //en-US
					public String version; //6.1.7601
					public String sp; //1
					@SerializedName("os-arch")
					public String os_arch; //64-bit
				}
				
				//analysis_detail OS-CORRELATION
				public class OSCorrelation {
					public String MESSAGE; //Suspicious file creation
				}
				
				//analysis_detail process
				public class Process {
					public String value; //full path to executable
					public String pid; //1264
					public String ppid; //5408
					public String parentname; //N/A
					public String cmdline; //full path and args
				}
				
				//analysis_detail regkey
				public class RegKey extends Generic {
					public String value; //full regkey path
					public String keypath; //ignore, looks like shortend version of value
					public String timestamp; //unix time
					public String hive; //ignore, value is hive+keypath
					public String valueName; //N/A, PhotoExpires
					public String valueText; //N/A, 2019-01-30T14:59:58Z
					public String valueType; //N/A, REG_SZ
					public String mode; //added
				}
			}
			
			public class Document {
				public String md5sum;
				public String filesize;
				public String sha1sum;
				public String mode;
				public String path;
			}

			//TODO if needed
			/**
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
			
			Date getUrlTimestamp() {
				try {
					return(df.parse(urlTimestamp));
				}
				catch(Exception e) {
					return(new Date());
				}
			}
			
			Date getNetTimestamp() {
				try {
					return(df.parse(netTimestamp));
				}
				catch(Exception e) {
					return(new Date());
				}
			}
			**/
		}
		
		public class Host {
			public String hostname;
			public String agent_version;
			public String ip;
			public String containment_state;
			public String os;
			public String agent_id;
		}
		
		public class Condition {
			public List<Test> tests;
			
			public class Test {
				public String type;
				public String operator;
				public String preservecase;
				public String token;
				public String value;
			}
		}
		
		public class MatchedSourceAlerts {
			public int row;
			public int _id;
			public String appliance_id;
			public String url;
			public Meta meta;
			public String indicator_name;
			public String indicator_id;
			public String indicator_revision;
			public String indicator_category_name;
			
			public class Meta {
				public String product_name;
				public String alert_id;
				public String alert_type;
				public String dst_ip;
				public String lms_iden;
				public String alert_severity;
				public String alert_timestamp;
				public String src_ip;
				
				public Date getTimestamp() {
					DateFormat dfWithMilli = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSX");
					DateFormat dfWithoutMilli = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
					
					//with milli
					try {
						return dfWithMilli.parse(this.alert_timestamp);
					}
					catch (Exception e) {
						//ignore fail
					}
					
					//without milli
					try {
						return dfWithoutMilli.parse(this.alert_timestamp);
					}
					catch (Exception e) {
						//ignore faile
					}
					
					//no luck just return now
					return( new Date());
				}
			}
		}
	}
}
