package com.phkcyber.fireeyeautomation.netflow;

import java.io.*;
import java.nio.charset.Charset;
import java.util.*;


import java.util.logging.*;

import javax.servlet.*;
import javax.servlet.http.*;

/**
 * Servlet Class to handle requests
 * All requests are generated by jQuery/AJAX calls from client
 *
 */
public class ServletHandler extends HttpServlet {
  private Map<String,String[]> params;
  private Charset utfCharset=null;

  private Logger logger;

  private int MAX_SEARCH_LOGS=50;
  
  private String action=null;
  private String strDateStart=null;
  private String strDateEnd=null;
  private String cidr=null;
  
  /**
   * @see HttpServlet#HttpServlet()
   */
  public ServletHandler() {
    super();
    logger = Logger.getLogger("com.phkcyber.fireeyeautomation.netflow.ServletHandler"); 

    try {
      utfCharset = Charset.forName("UTF-8");
    }
    catch(Exception e) {
      utfCharset=null;
    }
  }


  /**
   * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
   */
  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    try {
    	params = request.getParameterMap();
		parseParams();
	} 
    catch (Exception e) {
		throw new ServletException(e.getMessage());
	}
    
    //add security headers
    AddSecurityHeaders(response);

    if(utfCharset == null) {
      sendError(response, "Error setting UTF charset");
      throw new ServletException("Error setting UTF charset");
    }

    //make sure request parameters are valid
    try {
      params = request.getParameterMap(); 
    }
    catch(Exception e) {
      sendError(response, "No parameters where sent");
      return;
    }


    //search netflow records
    if(("search").equals(action)) {
      response.setContentType("application/json");

      //get start date
      if(params.get("start_date") == null) {
        strDateStart=null;
      }
      else {
        String[] arrDateStart = params.get("start_date");
        if( (arrDateStart != null) && (arrDateStart.length > 0) ) {
          strDateStart = arrDateStart[0];
        }
      }
      
      //get the end date
      if(params.get("end_date") == null) {
          strDateEnd=null;
        }
        else {
          String[] arrDateEnd = params.get("end_date");
          if( (arrDateEnd != null) && (arrDateEnd.length > 0) ) {
            strDateEnd = arrDateEnd[0];
          }
        }
      
      OutputStream out=null;
      try {
          //check if the search cidr is within out range before spending time searching
          /**
          if( (! cidr.startsWith("10.")) && (! cidr.startsWith("207.245.160.")) && (!cidr.startsWith("65.153.203")) ) {
            throw new Exception(cidr + " not in our CIDR ranges of netflow");
          }
	  **/

    	  Netflow netflow = new Netflow();   	  
    	  String json = netflow.searchToJson(strDateStart, strDateEnd, cidr, MAX_SEARCH_LOGS);
	    	
    	  System.out.println("Start: " + strDateStart + "  End: " + strDateEnd + "  CIDR: " + cidr);

          //System.out.println("BEFORE GETOUTPUTSTREAM"); 
    	  out = response.getOutputStream();
    		
    	  if(out == null) {
    		  throw new Exception("response outputstream is null");
    	  }
    	 
          //System.out.println("BEFORE JSON.GETBYTES"); 
    	  out.write( json.getBytes(utfCharset) );
    	  return;
      }
      catch(Exception e) {
          StringWriter errors = new StringWriter();
          e.printStackTrace(new PrintWriter(errors));
          System.out.println("Search error:\n" + errors);
    	  sendError(response, "Search error: " + e.getMessage());
      }
      finally {
    	  if(out != null)
    		  out.close();
      }


    }//end if search
    else {
    	sendError(response, "Unknown action requested");
    }
  }

  /**
   * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
   */
  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	  sendError(response, "Method not allowed");
  }

  


  /**
   * Stream the image back to the requestor in the
   * format of a response.
   *
   * @param data the bytes of the report 
   * @param response HTTP headers in servlet format
   */
  protected void streamFile(String filePath, HttpServletResponse response) {
    ServletOutputStream stream = null;
    FileInputStream f = null;
    BufferedInputStream buf = null;

    try {
      f = new FileInputStream( new File(filePath).getAbsolutePath());
      buf = null;

      stream = response.getOutputStream();

      buf = new BufferedInputStream(f);
      int readBytes = 0;

      //read from the file; write to the ServletOutputStream
      while ((readBytes = buf.read()) != -1)
        stream.write(readBytes);
    }
    catch (FileNotFoundException fnf) {
      fnf.getStackTrace();
    }
    catch (IOException ioe) {
      ioe.getStackTrace();
    }
    finally {
      try {
        if (stream != null)
          stream.close();
        if (buf != null)
           buf.close();
        if (f != null)
           f.close();
      }
      catch (IOException ioe) {
        ioe.getStackTrace();
      }
    }

  }

  
  /**
   * Verify the required parameters where passed 
   *
   */
  private void parseParams() throws Exception {
    String[] tmpVal;

    //get the action
    if(params.get("action") == null) {
      throw new Exception("action must be defined"); 
    }
    else {
      tmpVal= params.get("action");
      action = tmpVal[0];
    }

    //get the start date
    if(params.get("start_date") == null) {
      throw new Exception("start date must be defined"); 
    }
    else {
      tmpVal= params.get("start_date");
      strDateStart = tmpVal[0];
    }
    
    //get the end date
    if(params.get("end_date") == null) {
      throw new Exception("end date must be defined"); 
    }
    else {
      tmpVal= params.get("end_date");
      strDateEnd = tmpVal[0];
    }
    
    //get the cidr
    if(params.get("cidr") == null) {
      throw new Exception("cidr must be defined"); 
    }
    else {
      tmpVal= params.get("cidr");
      cidr = tmpVal[0];
    }

  }
  
  /**
   * Add headers for protection based on information from OWASP.
   *
   * @param response the response header
   */
  private void AddSecurityHeaders(HttpServletResponse response) {
    //click-jacking defense so content cannot be framed from a different website
    response.addHeader("X-Frame-Options", "SAMEORIGIN");

    //forces client to only use content-type sent from server and not try to
    //determine the content type by magic sniffing
    response.addHeader("X-Content-Type-Options", "nosniff");
  }



  /**
   * Wrapper method to send error to the client for use in pop-up error msgs
   */
  private void sendError(HttpServletResponse response, String errorMsg) {
    PrintWriter out=null;

    try {
      response.setContentType("text/html");
      out = response.getWriter();

      if(out != null)
        out.println("<html><head><script>alert('" + errorMsg + "');</script></head><body></body></html>");
    }
    catch(Exception e) {
      e.printStackTrace();
      logger.log(Level.FINE,"Debug",e);
    }
    finally {
      if(out != null)
        out.close();
    }
  }

}
